/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.ht.b2attr.b2attr_service.schema;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CloudTest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CloudTest\",\"namespace\":\"com.ht.b2attr.b2attr_service.schema\",\"fields\":[{\"name\":\"t_id\",\"type\":\"int\"},{\"name\":\"t_attribute\",\"type\":\"string\"},{\"name\":\"t_desc\",\"type\":[\"string\",\"null\"]},{\"name\":\"t_dt\",\"type\":{\"type\":\"record\",\"name\":\"Date\",\"namespace\":\"java.util\",\"fields\":[]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int t_id;
  @Deprecated public java.lang.CharSequence t_attribute;
  @Deprecated public java.lang.CharSequence t_desc;
  @Deprecated public java.util.Date t_dt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public CloudTest() {}

  /**
   * All-args constructor.
   */
  public CloudTest(java.lang.Integer t_id, java.lang.CharSequence t_attribute, java.lang.CharSequence t_desc, java.util.Date t_dt) {
    this.t_id = t_id;
    this.t_attribute = t_attribute;
    this.t_desc = t_desc;
    this.t_dt = t_dt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return t_id;
    case 1: return t_attribute;
    case 2: return t_desc;
    case 3: return t_dt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: t_id = (java.lang.Integer)value$; break;
    case 1: t_attribute = (java.lang.CharSequence)value$; break;
    case 2: t_desc = (java.lang.CharSequence)value$; break;
    case 3: t_dt = (java.util.Date)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 't_id' field.
   */
  public java.lang.Integer getTId() {
    return t_id;
  }

  /**
   * Sets the value of the 't_id' field.
   * @param value the value to set.
   */
  public void setTId(java.lang.Integer value) {
    this.t_id = value;
  }

  /**
   * Gets the value of the 't_attribute' field.
   */
  public java.lang.CharSequence getTAttribute() {
    return t_attribute;
  }

  /**
   * Sets the value of the 't_attribute' field.
   * @param value the value to set.
   */
  public void setTAttribute(java.lang.CharSequence value) {
    this.t_attribute = value;
  }

  /**
   * Gets the value of the 't_desc' field.
   */
  public java.lang.CharSequence getTDesc() {
    return t_desc;
  }

  /**
   * Sets the value of the 't_desc' field.
   * @param value the value to set.
   */
  public void setTDesc(java.lang.CharSequence value) {
    this.t_desc = value;
  }

  /**
   * Gets the value of the 't_dt' field.
   */
  public java.util.Date getTDt() {
    return t_dt;
  }

  /**
   * Sets the value of the 't_dt' field.
   * @param value the value to set.
   */
  public void setTDt(java.util.Date value) {
    this.t_dt = value;
  }

  /** Creates a new CloudTest RecordBuilder */
  public static com.ht.b2attr.b2attr_service.schema.CloudTest.Builder newBuilder() {
    return new com.ht.b2attr.b2attr_service.schema.CloudTest.Builder();
  }
  
  /** Creates a new CloudTest RecordBuilder by copying an existing Builder */
  public static com.ht.b2attr.b2attr_service.schema.CloudTest.Builder newBuilder(com.ht.b2attr.b2attr_service.schema.CloudTest.Builder other) {
    return new com.ht.b2attr.b2attr_service.schema.CloudTest.Builder(other);
  }
  
  /** Creates a new CloudTest RecordBuilder by copying an existing CloudTest instance */
  public static com.ht.b2attr.b2attr_service.schema.CloudTest.Builder newBuilder(com.ht.b2attr.b2attr_service.schema.CloudTest other) {
    return new com.ht.b2attr.b2attr_service.schema.CloudTest.Builder(other);
  }
  
  /**
   * RecordBuilder for CloudTest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CloudTest>
    implements org.apache.avro.data.RecordBuilder<CloudTest> {

    private int t_id;
    private java.lang.CharSequence t_attribute;
    private java.lang.CharSequence t_desc;
    private java.util.Date t_dt;

    /** Creates a new Builder */
    private Builder() {
      super(com.ht.b2attr.b2attr_service.schema.CloudTest.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.ht.b2attr.b2attr_service.schema.CloudTest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.t_id)) {
        this.t_id = data().deepCopy(fields()[0].schema(), other.t_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.t_attribute)) {
        this.t_attribute = data().deepCopy(fields()[1].schema(), other.t_attribute);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.t_desc)) {
        this.t_desc = data().deepCopy(fields()[2].schema(), other.t_desc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.t_dt)) {
        this.t_dt = data().deepCopy(fields()[3].schema(), other.t_dt);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing CloudTest instance */
    private Builder(com.ht.b2attr.b2attr_service.schema.CloudTest other) {
            super(com.ht.b2attr.b2attr_service.schema.CloudTest.SCHEMA$);
      if (isValidValue(fields()[0], other.t_id)) {
        this.t_id = data().deepCopy(fields()[0].schema(), other.t_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.t_attribute)) {
        this.t_attribute = data().deepCopy(fields()[1].schema(), other.t_attribute);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.t_desc)) {
        this.t_desc = data().deepCopy(fields()[2].schema(), other.t_desc);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.t_dt)) {
        this.t_dt = data().deepCopy(fields()[3].schema(), other.t_dt);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 't_id' field */
    public java.lang.Integer getTId() {
      return t_id;
    }
    
    /** Sets the value of the 't_id' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder setTId(int value) {
      validate(fields()[0], value);
      this.t_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 't_id' field has been set */
    public boolean hasTId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 't_id' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder clearTId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 't_attribute' field */
    public java.lang.CharSequence getTAttribute() {
      return t_attribute;
    }
    
    /** Sets the value of the 't_attribute' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder setTAttribute(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.t_attribute = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 't_attribute' field has been set */
    public boolean hasTAttribute() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 't_attribute' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder clearTAttribute() {
      t_attribute = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 't_desc' field */
    public java.lang.CharSequence getTDesc() {
      return t_desc;
    }
    
    /** Sets the value of the 't_desc' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder setTDesc(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.t_desc = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 't_desc' field has been set */
    public boolean hasTDesc() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 't_desc' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder clearTDesc() {
      t_desc = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 't_dt' field */
    public java.util.Date getTDt() {
      return t_dt;
    }
    
    /** Sets the value of the 't_dt' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder setTDt(java.util.Date value) {
      validate(fields()[3], value);
      this.t_dt = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 't_dt' field has been set */
    public boolean hasTDt() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 't_dt' field */
    public com.ht.b2attr.b2attr_service.schema.CloudTest.Builder clearTDt() {
      t_dt = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public CloudTest build() {
      try {
        CloudTest record = new CloudTest();
        record.t_id = fieldSetFlags()[0] ? this.t_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.t_attribute = fieldSetFlags()[1] ? this.t_attribute : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.t_desc = fieldSetFlags()[2] ? this.t_desc : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.t_dt = fieldSetFlags()[3] ? this.t_dt : (java.util.Date) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
